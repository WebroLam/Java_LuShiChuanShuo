///////////////1
8
summon 1 4 5
summon 2 2 1
summon 3 2 4
summon 4 2 3
summon 5 2 2
summon 6 2 1
summon 7 2 1
end
测试随从编号的从右递增变化
0
30
7 5 1 4 3 2 1 1
30
0
////////////////////////////



///////////////1
8
summon 1 4 5
summon 1 2 1
summon 1 2 1
summon 1 2 1
summon 1 2 1
summon 1 2 1
summon 1 2 1
end
测试随从编号的从左递增变化
0
30
7 1 1 1 1 1 1 5
30
0
////////////////////////////
///////////////2
15
summon 1 7 8
summon 1 6 6
summon 1 5 1
summon 1 4 4
summon 1 3 1
summon 1 2 2
summon 1 1 1
end
summon 1 1 20
attack 1 1
attack 1 2
attack 1 3
attack 1 4
end
summon 1 8 1

0
30
5 1 2 4 6 7
30
1 4
////////////////////////////
3
summon 1 20 20
attack 1 0
attack 1 0
测试后手英雄死亡
1
30
1 20
-10
0
/////////////////////////////////////////////
////////////////////////////
5
summon 1 1 1
end
summon 1 20 20
attack 1 0
attack 1 0

-1
-10
1 1
30
1 20
/////////////////////////////////////////////















要求：
1.	编写“炉石传说”的简易版系统并回答以下问题，具体要求见CSP201609-3或备注：
1）	依据评测用例约定，设计编写5个以上测试用例，需要明确指出，每个测试用例考察了系统的什么功能或可能存在的什么不足；
2）	编程过程中，如何做好各种标识符的命名，确保符合驼峰规则；
3）	编程、调试过程中，如何用好log4j来获取不同级别的信息，提高调试效率；
4）	编程过程中，如何做好注释，用好javadoc；
5）	通过全部CSP评测用例。

2.	重新审视已经通过全部CSP测试用例的系统代码并回答以下问题：
1)	原来整个系统设计了多少个类，每个类分别提供什么服务，这些类/对象是如何协作来实现系统功能的？
2)	原来系统的实现方式，在类设计的层面上，设计是否合理？存在什么不足？你如何反思并改进类的设计？
3)	经过修改后，如何做到“对问题解决方案的描述”能尽可能直观地对应到代码？

4)	为了使另一个程序员（同学）能迅速读懂你的代码，你认为还需要做什么修改？修改后找同学测试并说明过程和效果。
5)	尝试从接口、多态等基础概念出发，分析改进后系统设计的优缺点。

3.	自选角度，扩展“炉石传说”简易版系统
1）	对拟扩展方向进行分析，说明为什么要做这个扩展
2）	在前述系统中，怎样扩展出要实现的这些特征？有多少现有代码需要重写，有多少需要替换？
3）	实现至少一个拟扩展的特征
4）	再度分析、评价1、2、3中3个系统实现版本的设计优缺点

4.	回答以下问题并代码提交
1)	git和github分别是什么？
2)	如何在IDE中使用git，有什么需要注意的地方？
3)	将前述炉石传说代码提交到github（其他仓库也可）
4)	什么是代码冲突？Git代码的提交要注意什么事项？

5)	代码分支及版本管理指的是什么？我们要如何配合做好该项事务？


